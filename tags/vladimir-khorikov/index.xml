<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Vladimir Khorikov on Readings</title><link>https://easylive1989.github.io/readings/tags/vladimir-khorikov/</link><description>Recent content in Vladimir Khorikov on Readings</description><generator>Hugo -- 0.144.2</generator><language>en</language><lastBuildDate>Mon, 10 Feb 2025 08:50:17 +0800</lastBuildDate><atom:link href="https://easylive1989.github.io/readings/tags/vladimir-khorikov/index.xml" rel="self" type="application/rss+xml"/><item><title>Domain model purity vs. domain model completeness (DDD Trilemma)</title><link>https://easylive1989.github.io/readings/backup/domain-model-purity-vs-domain-model-completeness-ddd-trilemma/</link><pubDate>Mon, 10 Feb 2025 08:50:17 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/domain-model-purity-vs-domain-model-completeness-ddd-trilemma/</guid><description>&lt;p>&lt;a href="https://enterprisecraftsmanship.com/posts/domain-model-purity-completeness/">Source&lt;/a>&lt;/p>
&lt;p>I’ve been meaning to write this article for a long time and, finally, here it is: the topic of domain model purity versus domain model completeness.&lt;/p>
&lt;p>我一直想寫這篇文章，終於完成了！主題是關於領域模型的純粹性與領域模型的完整性。&lt;/p>
&lt;h2 id="domain-model-completeness">Domain model completeness&lt;/h2>
&lt;p>In this article, we’ll talk about a trilemma that comes up in each and every project. In fact, I received a dozen or so questions about this trilemma during the last year or two (slightly embarrassing to realize how long some article ideas spend in my write-up queue).&lt;/p></description></item><item><title>Domain services vs Application Service</title><link>https://easylive1989.github.io/readings/backup/domain-services-vs-application-service/</link><pubDate>Mon, 10 Feb 2025 08:48:57 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/domain-services-vs-application-service/</guid><description>&lt;p>&lt;a href="https://enterprisecraftsmanship.com/posts/domain-vs-application-services/">Source&lt;/a>&lt;/p>
&lt;p>In this post, we’ll take a look at domain services: what differs them from application services and when it is preferable to use one in addition to an application service.&lt;/p>
&lt;p>在這篇文章中，我們將探討領域服務（Domain Services）：它們與應用服務（Application Services）的區別，以及什麼時候適合在應用服務之外使用領域服務。&lt;/p>
&lt;h2 id="1-domain-services-vs-application-services">1. Domain services vs Application services&lt;/h2>
&lt;p>It is often said that domain services carry domain knowledge that doesn’t naturally fit entities and value objects. There’s another reason, however, why you may want to introduce a domain service. That reason is related to domain model isolation. More on that in just a minute.&lt;/p></description></item><item><title>Entity vs Value Object - the ultimate list of differences</title><link>https://easylive1989.github.io/readings/backup/entity-vs-value-ojbect-the-ultimate-list-of-differences/</link><pubDate>Mon, 10 Feb 2025 08:46:31 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/entity-vs-value-ojbect-the-ultimate-list-of-differences/</guid><description>&lt;p>&lt;a href="https://enterprisecraftsmanship.com/posts/entity-vs-value-object-the-ultimate-list-of-differences/">Source&lt;/a>&lt;/p>
&lt;p>I wrote about &lt;a href="https://enterprisecraftsmanship.com/2014/11/08/domain-object-base-class/">entities&lt;/a> and &lt;a href="https://enterprisecraftsmanship.com/2015/01/03/value-objects-explained/">value objects&lt;/a> some time ago. In this post, I’d like to talk about differences between Entity vs Value Object in more detail.&lt;/p>
&lt;p>我之前寫過有關&lt;a href="https://enterprisecraftsmanship.com/2014/11/08/domain-object-base-class/">實體 (Entity)&lt;/a>和&lt;a href="https://enterprisecraftsmanship.com/2015/01/03/value-objects-explained/">值物件 (Value Object)&lt;/a>的文章。在這篇文章中，我想更詳細地探討實體與值物件之間的差異。&lt;/p>
&lt;p>I know, the topic isn’t new and there are a lot of articles on the Internet discussing it already. Nevertheless, I didn’t find any with an exhaustive, comprehensive description, so I decided to create my own.&lt;/p>
&lt;p>我知道，這個主題並不新穎，網路上已有許多相關討論的文章。儘管如此，我並未找到任何內容詳盡且全面的描述，因此我決定自己撰寫一篇。&lt;/p>
&lt;h2 id="1-entity-vs-value-object-types-of-equality">1. Entity vs Value Object: types of equality&lt;/h2>
&lt;p>To define the differences between entities and value objects, we need to introduce three types of equality which come into play when we need to compare objects to each other.&lt;/p></description></item><item><title>Tdd Best Practices</title><link>https://easylive1989.github.io/readings/backup/tdd-best-practices/</link><pubDate>Fri, 07 Feb 2025 17:19:54 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/tdd-best-practices/</guid><description>&lt;p>&lt;a href="https://enterprisecraftsmanship.com/posts/tdd-best-practices/">Source&lt;/a>&lt;/p>
&lt;p>Last week, we discussed the differences between stubs and mocks. Today, we’ll talk about some general tips and advice that regard to TDD and writing tests in general.&lt;/p>
&lt;ul>
&lt;li>Test-induced design damage or why TDD is so painful&lt;/li>
&lt;li>How to do painless TDD&lt;/li>
&lt;li>Integration testing or how to sleep well at nights&lt;/li>
&lt;li>The most important TDD rule&lt;/li>
&lt;li>Stubs vs Mocks&lt;/li>
&lt;li>&lt;strong>TDD best practices&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="test-first-vs-code-first-approach">Test-first vs code-first approach&lt;/h2>
&lt;p>There’s some dispute about how exactly tests should be written. While the TDD process itself insists on the test-first approach, I personally think that both ways are applicable in different circumstances. Let’s look at the pros and cons of each of them.&lt;/p></description></item></channel></rss>