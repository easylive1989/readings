<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kent Beck on Readings</title><link>https://easylive1989.github.io/readings/tags/kent-beck/</link><description>Recent content in Kent Beck on Readings</description><generator>Hugo -- 0.143.1</generator><language>en</language><lastBuildDate>Sat, 08 Feb 2025 16:07:52 +0800</lastBuildDate><atom:link href="https://easylive1989.github.io/readings/tags/kent-beck/index.xml" rel="self" type="application/rss+xml"/><item><title>Abstract vs Concrete Parameters</title><link>https://easylive1989.github.io/readings/backup/abstract-vs-concrete-parameters/</link><pubDate>Sat, 08 Feb 2025 16:07:52 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/abstract-vs-concrete-parameters/</guid><description>&lt;p>&lt;a href="https://tidyfirst.substack.com/p/abstract-vs-concrete-parameters?utm_source=post-email-title&amp;amp;publication_id=256838&amp;amp;post_id=121830629&amp;amp;isFreemail=true&amp;amp;utm_medium=email">Source&lt;/a>&lt;/p>
&lt;p>Originally published August 2008. It’s interesting to me how many of the themes of 15 years ago are still relevant today. I was more down in the programming details then than I usually am today. Let me know if this sort of specific advice helps.&lt;/p>
&lt;p>最初發表於 2008 年 8 月。令我感到有趣的是，15 年前的許多主題至今仍然具有相關性。當時我比現在更深入編程細節。如果這類具體的建議對你有幫助，請告訴我。&lt;/p>
&lt;blockquote>
&lt;p>Easy-to-test software is &amp;ldquo;controllable&amp;rdquo;. Testers can cheaply and accurately simulate the contexts in which the software needs to run. Two contradictory patterns help achieve controllability: making parameters more concrete and more abstract. This apparent contradiction resolves when looked at from a broader perspective.&lt;/p></description></item><item><title>Forest and Desert</title><link>https://easylive1989.github.io/readings/backup/forest-and-desert/</link><pubDate>Sat, 08 Feb 2025 16:06:09 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/forest-and-desert/</guid><description>&lt;p>&lt;a href="https://tidyfirst.substack.com/p/forest-and-desert">Source&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>This guest post is written by &lt;a href="https://open.substack.com/users/14841068-beth-andres-beck?utm_source=mentions">Beth Andres-Beck&lt;/a>, following discussions we had preparing for our recent Øredev pair keynote (link to come).&lt;/p>&lt;/blockquote>
&lt;p>“This architecture you’ve described sounds like a lush forest, but we are living in the desert. I don’t see how this will work here.”&lt;/p>
&lt;p>這個架構聽起來像是一片茂密的森林，但我們身處沙漠之中。我看不出來這套做法如何能在這裡運作。&lt;/p>
&lt;p>I am often confronted with skepticism, but seldom is it so constructively put.&lt;/p>
&lt;p>我經常面對質疑，但很少有人能如此具有建設性地表達出來。&lt;/p>
&lt;h2 id="desert">Desert&lt;/h2>
&lt;p>In a software desert, we travel by force of will under an oppressive heat, with saddlebags stuffed to the brim. There is no room for error in the desert, no opportunity for good news, no time to revisit a place we have already been. It is very important that we know how long the journey will take, even when we aren’t sure that where we end up will be any better than where we started.&lt;/p></description></item><item><title>Coupling and Cohension</title><link>https://easylive1989.github.io/readings/backup/coupling-and-cohension/</link><pubDate>Sat, 08 Feb 2025 16:05:34 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/coupling-and-cohension/</guid><description>&lt;p>&lt;a href="https://tidyfirst.substack.com/p/coupling-and-cohesion">Source&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>This is from 2009, a mere 4 years into my study of software design. Note that the description of cohesion is nowhere near as crisp as in &lt;em>Tidy First?&lt;/em>. Being able to discuss cohesion clearly was what took me the next 10 years. The only way to be able to describe something well is to describe it badly 100 times.&lt;/p>
&lt;p>這是2009年的一篇文章，那時我才學習軟體設計四年。請注意，對於內聚性的描述遠不如《Tidy First?》一書中的清晰。能夠清楚地討論內聚性花了我接下來的十年時間。能夠很好地描述某件事情的唯一方法就是糟糕地描述它一百次。&lt;/p>&lt;/blockquote>
&lt;p>I just finished a week of training at SKB Kontur in Ekaterinburg, Russia. We covered a lot of ground during the week–TDD, social principles of development, habits for agility. We ended the week talking about software design. During design day we tried to identify the best-designed software there (I recommend this exercise). Because the day was so experiential, we didn’t get to talk about all the design concepts I wanted to discuss. In particular, coupling and cohesion play a central role in the value of software design. As a kind of parting gift to the great group of programmers in the workshop (and because it will bug me if I don’t write it down), here is an introduction to coupling and cohesion.&lt;/p></description></item><item><title>Complain and Propose</title><link>https://easylive1989.github.io/readings/backup/complain-and-propose/</link><pubDate>Sat, 08 Feb 2025 16:04:48 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/complain-and-propose/</guid><description>&lt;p>&lt;a href="https://tidyfirst.substack.com/p/complain-and-propose">Source&lt;/a>&lt;/p>
&lt;p>&amp;ldquo;Jean-Louis wants to see you in his office.&amp;rdquo; My boss Eagle Burns&amp;rsquo; bald head disappeared from the door to my office. Something about his tone suggested that righteous indignation, which I had been nursing for several days, was not the right attitude to pack for my trip. I started getting scared.&lt;/p>
&lt;p>「Jean-Louis 想在他的辦公室見你。」我的老闆 Eagle Burns 的光頭從我辦公室的門口消失了。他的語氣中透著某種意味，讓我覺得，這幾天我一直抱持的義憤填膺並不是此次旅程該帶上的態度。我開始感到害怕。&lt;/p>
&lt;p>It was Apple 1988.&lt;/p>
&lt;p>那是 1988 年的 Apple。&lt;/p>
&lt;p>Jean-Louis Gassée was head of engineering. He had a reputation as a fire-eater, someone who chewed fools up and spit them out. I had been foolish, it suddenly occurred to me. Do the math.&lt;/p></description></item><item><title>One at a Time</title><link>https://easylive1989.github.io/readings/backup/one-at-a-time/</link><pubDate>Sat, 08 Feb 2025 00:00:28 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/one-at-a-time/</guid><description>&lt;p>&lt;a href="https://tidyfirst.substack.com/p/one-at-a-time">Source&lt;/a>&lt;/p>
&lt;p>Whatever principles I try to live &amp;amp; work by, I try to apply them just as much &amp;amp; as often as possible. Yesterday, though, a lawn chair taught me a valuable lesson about the principle of flow.&lt;/p>
&lt;p>無論我嘗試遵循什麼原則生活和工作，我都盡可能頻繁地應用這些原則。然而，昨天，一把lawn chair教會了我關於流動原則的寶貴一課。&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F80858843-e71f-46e9-ae5e-e5b63ce43e2d_768x576.jpeg">&lt;/p>
&lt;p>The Principle of Flow states that, all else being equal, smaller batches of value more frequently is worth more than that same value delivered in fewer, larger batches. You’ll find the Principle of Flow working every corner of Extreme Programming—software design, planning, testing, integration, deployment, conversations—every corner.&lt;/p></description></item><item><title>Learning in the Forest</title><link>https://easylive1989.github.io/readings/backup/learning-in-the-forest/</link><pubDate>Fri, 07 Feb 2025 16:18:55 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/learning-in-the-forest/</guid><description>&lt;p>&lt;a href="https://tidyfirst.substack.com/p/learning-in-the-forest?utm_source=post-email-title&amp;amp;publication_id=256838&amp;amp;post_id=151741306&amp;amp;utm_campaign=email-post-title&amp;amp;isFreemail=true&amp;amp;r=qyvh0&amp;amp;triedRedirect=true&amp;amp;utm_medium=email">Source&lt;/a>&lt;/p>
&lt;p>How &amp;amp; why does The Forest emphasize learning over production?&lt;/p>
&lt;p>《森林》如何以及為什麼強調學習重於產出？&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9c18a32f-0673-40ca-9cb1-5cd7ccc0561c_583x220.png">&lt;/p>
&lt;p>Well here you go, thrillfall.&lt;/p>
&lt;p>以下是詳細說明，thrillfall。&lt;/p>
&lt;p>Kent once visited a media tablet project that Dan Ingalls was running (pre-iPad). They were coding in Smalltalk, of course, but they had to port it to their new platform. He was telling me the story of implementing the graphics primitives. Dan had (with Diana Merry-Shapiro) invented BitBLT. Everybody on the team had implemented BitBLT on some platform. Everybody except one. So that person, of course, implemented BitBLT.&lt;/p></description></item></channel></rss>