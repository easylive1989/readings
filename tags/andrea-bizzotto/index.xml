<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Andrea Bizzotto on Readings</title><link>https://easylive1989.github.io/readings/tags/andrea-bizzotto/</link><description>Recent content in Andrea Bizzotto on Readings</description><generator>Hugo -- 0.145.0</generator><language>en</language><lastBuildDate>Sat, 05 Apr 2025 23:18:28 +0800</lastBuildDate><atom:link href="https://easylive1989.github.io/readings/tags/andrea-bizzotto/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Use Abstraction and the Repository Pattern Effectively in Your Flutter Apps</title><link>https://easylive1989.github.io/readings/backup/how-to-use-abstraction-and-the-repository-pattern-effectively-in-your-flutter-apps/</link><pubDate>Sat, 05 Apr 2025 23:18:28 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/how-to-use-abstraction-and-the-repository-pattern-effectively-in-your-flutter-apps/</guid><description>&lt;p>&lt;a href="https://codewithandrea.com/articles/abstraction-repository-pattern-flutter/?utm_source=canopas-stack-weekly">Source&lt;/a>&lt;/p>
&lt;p>If your Flutter app talks to a backend or some server-side APIs, you’ll want to have a good &lt;strong>separation of concerns&lt;/strong> between the UI code and your data-access layer.&lt;/p>
&lt;p>如果你的 Flutter 應用程式需要與後端或某些伺服器端 API 通訊，你會希望在 UI 代碼和資料存取層之間有良好的&lt;strong>責任分離&lt;/strong>。&lt;/p>
&lt;p>A very good way to do this is to use the &lt;a href="https://codewithandrea.com/articles/flutter-repository-pattern/">repository pattern&lt;/a>, which lets you encapsulate all the data access logic (serialization, networking) inside a single class (the repository).&lt;/p>
&lt;p>一個非常好的方法是使用&lt;a href="https://codewithandrea.com/articles/flutter-repository-pattern/">儲存庫模式 (repository pattern)&lt;/a>，這種模式讓你可以將所有資料存取邏輯（如序列化、網路請求）封裝在一個類別（儲存庫）中。&lt;/p>
&lt;p>The benefit is that the rest of your app only communicates to the &lt;strong>public interface&lt;/strong> of that repository and doesn’t need to know about all its implementation details (such as what 3rd party APIs are used under the hood).&lt;/p></description></item></channel></rss>