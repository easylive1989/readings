<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Roy Osherove on Readings</title><link>https://easylive1989.github.io/readings/tags/roy-osherove/</link><description>Recent content in Roy Osherove on Readings</description><generator>Hugo -- 0.144.2</generator><language>en</language><lastBuildDate>Sat, 08 Feb 2025 21:30:20 +0800</lastBuildDate><atom:link href="https://easylive1989.github.io/readings/tags/roy-osherove/index.xml" rel="self" type="application/rss+xml"/><item><title>Naming Standards for Unit Tests</title><link>https://easylive1989.github.io/readings/backup/naming-standards-for-unit-tests/</link><pubDate>Sat, 08 Feb 2025 21:30:20 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/naming-standards-for-unit-tests/</guid><description>&lt;p>&lt;a href="https://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html">Source&lt;/a>&lt;/p>
&lt;p>&lt;em>The basic naming of a test comprises of three main parts:&lt;/em>&lt;/p>
&lt;p>測試名稱的基本結構包含三個主要部分：&lt;/p>
&lt;p> &lt;strong>[UnitOfWork_StateUnderTest_ExpectedBehavior]&lt;/strong>&lt;/p>
&lt;p>A unit of work is a use case in the system that startes with a public method and ends up with one of three types of results: a return value/exception, a state change to the system which changes its behavior, or a call to a third party (when we use mocks). so a unit of work can be a small as a method, or as large as a class, or even multiple classes. as long is it all runs in memory, and is fully under our control.&lt;/p></description></item></channel></rss>