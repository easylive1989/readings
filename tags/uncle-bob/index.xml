<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Uncle Bob on Readings</title><link>https://easylive1989.github.io/readings/tags/uncle-bob/</link><description>Recent content in Uncle Bob on Readings</description><generator>Hugo -- 0.145.0</generator><language>en</language><lastBuildDate>Thu, 13 Mar 2025 23:57:10 +0800</lastBuildDate><atom:link href="https://easylive1989.github.io/readings/tags/uncle-bob/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing Like the TSA</title><link>https://easylive1989.github.io/readings/backup/testing-like-the-tsa/</link><pubDate>Thu, 13 Mar 2025 23:57:10 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/testing-like-the-tsa/</guid><description>&lt;p>&lt;a href="https://blog.cleancoder.com/uncle-bob/2017/03/06/TestingLikeTheTSA.html">Source&lt;/a>&lt;/p>
&lt;p>I was very glad to read in DHH’s &lt;a href="https://signalvnoise.com/posts/3159-testing-like-the-tsa">recent post&lt;/a> that he is actually still using TDD***. I’m glad he has realized that TDD is not, in fact, &lt;a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">dead&lt;/a>.&lt;/p>
&lt;p>我很高興在 DHH 最近的&lt;a href="https://www.google.com/url?sa=E&amp;amp;q=https%3A%2F%2Fsignalvnoise.com%2Fposts%2F3159-testing-like-the-tsa">文章&lt;/a>中讀到他實際上仍在使用 TDD***。我很高興他意識到 TDD 實際上並沒有&lt;a href="https://www.google.com/url?sa=E&amp;amp;q=http%3A%2F%2Fdavid.heinemeierhansson.com%2F2014%2Ftdd-is-dead-long-live-testing.html">死亡&lt;/a>。&lt;/p>
&lt;p>This blog is a simple response; just to state a couple of disagreements. But I have to say, I agree more than I disagree.&lt;/p>
&lt;p>這篇部落格只是一個簡單的回應；只是為了說明幾個不同意的地方。但我必須說，我同意的地方比不同意的地方還多。&lt;/p>
&lt;p>DHH presented seven points. I have reproduced them below, along with my comments. And since DHH did not justify his opinions, I’ll not justify mine.&lt;/p></description></item><item><title>Test Contra-variance</title><link>https://easylive1989.github.io/readings/backup/test-contra-variance/</link><pubDate>Thu, 13 Mar 2025 23:51:39 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/test-contra-variance/</guid><description>&lt;p>&lt;a href="https://blog.cleancoder.com/uncle-bob/2017/10/03/TestContravariance.html">Source&lt;/a>&lt;/p>
&lt;p>Do you write unit tests?
你寫單元測試嗎？&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Yes, of course!&lt;/em>
是的，當然！&lt;/p>&lt;/blockquote>
&lt;p>Do you write them first?
你會先寫單元測試嗎？&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Yes, I follow &lt;a href="http://www.softwaretestingmagazine.com/knowledge/the-three-rules-of-test-driven-development/">the three laws of TDD&lt;/a>.&lt;/em>
是的，我遵循&lt;a href="https://www.google.com/url?sa=E&amp;amp;q=http%3A%2F%2Fwww.softwaretestingmagazine.com%2Fknowledge%2Fthe-three-rules-of-test-driven-development%2F">TDD 的三個法則&lt;/a>。&lt;/p>&lt;/blockquote>
&lt;p>What is the difference in module structure between your tests and your code?
你的測試和程式碼之間的模組結構有什麼不同？&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>I create one test class per production class.&lt;/em>
我為每個生產類別建立一個測試類別。&lt;/p>&lt;/blockquote>
&lt;p>So if you have a production class named &lt;code>User&lt;/code> you will have a test class named &lt;code>UserTest&lt;/code>?
所以如果你有一個名為 User 的生產類別，你就會有一個名為 UserTest 的測試類別？&lt;/p></description></item><item><title>First-Class Tests</title><link>https://easylive1989.github.io/readings/backup/first-class-tests/</link><pubDate>Thu, 13 Mar 2025 23:29:32 +0800</pubDate><guid>https://easylive1989.github.io/readings/backup/first-class-tests/</guid><description>&lt;p>&lt;a href="https://blog.cleancoder.com/uncle-bob/2017/05/05/TestDefinitions.html">Source&lt;/a>&lt;/p>
&lt;p>I believe it may be my fate to find blogs written by people who have fallen prey to unfortunate disciplines that have led them to give up on unit testing. This blog is just another one of those.&lt;/p>
&lt;p>我相信，我的命運可能就是不斷遇到那些因為不幸的學科而放棄單元測試的人所撰寫的部落格。這篇部落格也只是其中之一。&lt;/p>
&lt;p>The author tells of how his unit tests are fragile because he mocks out all the collaborators. (sigh). Every time a collaborator changes, the mocks have to be changed. And this, of course, makes the unit tests fragile.&lt;/p></description></item></channel></rss>